{
  "hash": "182e67fa4c60ff22b470c5aae2334491",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TidyTuesday datasets\"\nsubtitle: \"Creating treemaps with `{highcharter}`\"\nformat:\n  html:\n    css: style.css\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\nWe will look into the insights from past datasets in `TidyTuesday` datasets and learn how to draw treemaps using the `{highcharter}` R package powered by highchart.js.\n:::\n\n# Datasets\n\nWe know that there are [four datasets](https://github.com/rfordatascience/tidytuesday/tree/master/data/2024/2024-07-02)[^1] available this week. We will mainly look at the `tt_datasets` as I am interested in **how the number of columns and that of rows affect the memory size when datasets are read into R.**\n\n[^1]: tt_summary.csv, tt_urls.csv, tt_datasets.csv, tt_variables.csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasets <- tidytuesdayR::tt_load(2024, 27, download_files = \"tt_datasets.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tDownloading file 1 of 1: `tt_datasets.csv`\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(datasets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$tt_datasets\n# A tibble: 644 × 5\n    year  week dataset_name                 variables observations\n   <dbl> <dbl> <chr>                            <dbl>        <dbl>\n 1  2018     1 us_avg_tuition                      13           50\n 2  2018     2 nfl_salary                          11          800\n 3  2018     3 global_mortality                    35         6156\n 4  2018     4 week4_australian_salary              6         2197\n 5  2018     5 week5_acs2015_county_data           37         3220\n 6  2018     6 week6_coffee_chains                 13        25600\n 7  2018     9 week9_comic_characters              17        23272\n 8  2018    11 week11_fifa_audience                 6          191\n 9  2018    12 week12_google_trends                 5           37\n10  2018    12 week12_mediacloud_hurricanes         5           38\n# ℹ 634 more rows\n```\n\n\n:::\n:::\n\n\nHere we define a scalable variable *dimension*, $d$: $d=n\\times{m}$ where $n$ is the number of observations and $m$ is that of variables in a datasets. Then we will need to find out the object sizes when they are read into R. This is an expensive computation so here I only show the results. As we can see from the table below, column `obj_size`[^2] shows the object size of each dataset:\n\n[^2]: in MB\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n   year  week dataset_name             variables observations dimension obj_size\n  <dbl> <dbl> <chr>                        <dbl>        <dbl>     <dbl>    <dbl>\n1  2018     1 us_avg_tuition                  13           50       650   0.0101\n2  2018     2 nfl_salary                      11          800      8800   0.0693\n3  2018     3 global_mortality                35         6156    215460   1.67  \n4  2018     4 week4_australian_salary          6         2197     13182   0.207 \n5  2018     5 week5_acs2015_county_da…        37         3220    119140   1.04  \n6  2018     6 week6_coffee_chains             13        25600    332800  11.0   \n```\n\n\n:::\n:::\n\n\n# Treemap Visualization\n\nNext, we could visualize the distribution of the object sizes across the years with a treemap. There are many R packages that can achieve this goal. For static plots, you have [treemap](https://r-graph-gallery.com/235-treemap-with-subgroups.html) and [ggplot2](https://www.geeksforgeeks.org/treemap-with-ggplot2-and-treemapify-in-r/). For interactive plots, you have [plotly](https://stackoverflow.com/a/72194449) and highcharter. This article will be mainly focusing on using highcharter. Highcharter is interface of highchart JS visualization library for R. Though the information provided by the highcharter documentation is helpful, the best practice is to visit the [highchart JS API reference page](https://api.highcharts.com/highcharts/) as we are building the visualization.\n\n## Understanding data structure\n\nFrom the highchart JS library documentation:\n\n> The data is structured as a Tree, where each point represents a node. Each node can have its own children.\n\n> The tree automatically has one node at the top representing the root node. If a point has an undefined parent, or the parent is not matching any id, the parent will be automatically set to the root node.\n\n![](images/clipboard-4013933341.png)\n",
    "supporting": [
      "20240702_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}